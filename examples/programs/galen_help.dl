.in
.decl r(R: number, P: number, E: number)
.decl c(Y: number, Z: number, W: number)
.decl u(R: number, Z: number, W: number)
.decl s(R: number, P: number)
.decl p0(X: number, Z: number)
.decl q0(X: number, Y: number, Z: number)




.printsize
.decl qHelp(X: number, Y: number, Z: number)
.decl uHelp(X: number, Y: number, Z: number)
.decl quHelp(X: number, Y: number, Z: number, W: number)
.decl p(X: number, Z: number)
.decl q(X: number, Y: number, Z: number)

.rule
p(x, y) :- p0(x, y).
q(x, y, z) :- q0(x, y, z).

p(x, z) :- p(x, y), p(y, z).
q(x, r, z) :- p(x, y), q(y, r, z).
q(x, q, z) :- q(x, r, z), s(r, q).

# (1)
# p(x, z) :- p(y, w), u(w, r, z), q(x, r, y).
# (fast) p(x, z) :- q(x, r, y), p(y, w), u(w, r, z).
# rewrite
qHelp(x, r, y) :- q(x, r, y), p(y, _), u(_, r, _).
uHelp(w, r, z) :- u(w, r, z), p(_, w).
quHelp(y, w, x, z) :- uHelp(w, r, z), qHelp(x, r, y).
p(x, z) :- p(y, w), quHelp(y, w, x, z).

# (2)
# p(x, z) :- c(y, w, z), p(x, y), p(x, w).
# (fast) p(x, z) :- p(x, y), c(y, w, z), p(x, w).
p(x, z) :- p(x, y), c(y, w, z), p(x, w).

# (3)
# q(x, e, o) :- q(x, y, z), r(y, u, e), q(z, u, o).
# (fast) q(x, e, o) :- q(z, u, o), q(x, y, z), r(y, u, e).
q(x, e, o) :- q(z, u, o), q(x, y, z), r(y, u, e).



