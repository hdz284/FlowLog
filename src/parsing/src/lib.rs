//! FlowLog Parser Library
//!
//! This crate provides parsing capabilities for FlowLog, a logic programming language.
//! It includes modules for handling different language constructs such as aggregations,
//! arithmetic expressions, comparisons, declarations, heads, and complete rules.
//!
//! The parser is built using the Pest parsing expression grammar (PEG) library,
//! which provides fast and reliable parsing with clear error messages.
//!
//! # Example
//! ```rust
//! use flowlog_parser::{FlowLogParser, Rule, Parser};
//! use pest::iterators::Pair;
//!
//! // Parse a simple FlowLog expression
//! let input = "person(john, 25)";
//! let parsed = FlowLogParser::parse(Rule::head, input).unwrap();
//! ```

// Module declarations - each module handles a specific aspect of FlowLog syntax
pub mod aggregation; // Aggregation functions (sum, max, min, count)
pub mod arithmetic; // Arithmetic expressions and operations
pub mod compare; // Comparison operations (>, <, =, !=, etc.)
pub mod decl; // Variable and predicate declarations
pub mod head; // Head expressions in logic rules
pub mod parser; // Core parsing utilities and traits
pub mod rule; // Complete rule definitions and structures

// External crate imports
extern crate pest; // Pest parsing expression grammar library

#[macro_use]
extern crate pest_derive; // Derive macros for generating parsers

// Public re-exports for convenient access to commonly used types
pub use pest::{
    iterators::Pair, // Represents a matched rule with its position in the source
    Parser,          // Trait for parser implementations
};

/// The main parser struct for FlowLog language constructs.
///
/// This parser is automatically generated by the `pest_derive` macro based on
/// the grammar definition in `grammar.pest`. It can parse various FlowLog
/// constructs including rules, heads, arithmetic expressions, aggregations,
/// and comparisons.
///
/// # Grammar File
/// The parser grammar is defined in `./grammar.pest` which specifies the
/// syntax rules for the FlowLog language.
///
/// # Usage
/// ```rust
/// use flowlog_parser::{FlowLogParser, Rule, Parser};
///
/// let input = "result(x + y) :- input(x), input(y).";
/// let pairs = FlowLogParser::parse(Rule::rule, input)?;
/// ```
#[derive(Parser)]
#[grammar = "./grammar.pest"]
pub struct FlowLogParser;
